"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class xsim_vehicle_global_info(object):
    __slots__ = ["ntime", "num_of_vehicle", "TV_mark", "id", "x_pos", "y_pos", "x_vel", "y_vel", "length", "width", "heading", "lane_id", "dist_to_left", "dist_to_right"]

    def __init__(self):
        self.ntime = 0
        self.num_of_vehicle = 0
        self.TV_mark = []
        self.id = []
        self.x_pos = []
        self.y_pos = []
        self.x_vel = []
        self.y_vel = []
        self.length = []
        self.width = []
        self.heading = []
        self.lane_id = []
        self.dist_to_left = []
        self.dist_to_right = []

    def encode(self):
        buf = BytesIO()
        buf.write(xsim_vehicle_global_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.ntime, self.num_of_vehicle))
        buf.write(struct.pack('>%db' % self.num_of_vehicle, *self.TV_mark[:self.num_of_vehicle]))
        buf.write(struct.pack('>%di' % self.num_of_vehicle, *self.id[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.x_pos[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.y_pos[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.x_vel[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.y_vel[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.length[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.width[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.heading[:self.num_of_vehicle]))
        buf.write(struct.pack('>%di' % self.num_of_vehicle, *self.lane_id[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.dist_to_left[:self.num_of_vehicle]))
        buf.write(struct.pack('>%df' % self.num_of_vehicle, *self.dist_to_right[:self.num_of_vehicle]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != xsim_vehicle_global_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return xsim_vehicle_global_info._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = xsim_vehicle_global_info()
        self.ntime, self.num_of_vehicle = struct.unpack(">qi", buf.read(12))
        self.TV_mark = struct.unpack('>%db' % self.num_of_vehicle, buf.read(self.num_of_vehicle))
        self.id = struct.unpack('>%di' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.x_pos = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.y_pos = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.x_vel = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.y_vel = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.length = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.width = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.heading = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.lane_id = struct.unpack('>%di' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.dist_to_left = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        self.dist_to_right = struct.unpack('>%df' % self.num_of_vehicle, buf.read(self.num_of_vehicle * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if xsim_vehicle_global_info in parents: return 0
        tmphash = (0x72e86c642bc9bba2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if xsim_vehicle_global_info._packed_fingerprint is None:
            xsim_vehicle_global_info._packed_fingerprint = struct.pack(">Q", xsim_vehicle_global_info._get_hash_recursive([]))
        return xsim_vehicle_global_info._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

